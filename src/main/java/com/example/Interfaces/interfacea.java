/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.example.Interfaces;

import com.example.documents.*;
import com.example.dao.*;
import java.sql.SQLException;
import java.util.LinkedList;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yassi
 */
public class interfacea extends javax.swing.JFrame {

        /**
         * Creates new form interfacea
         */
        public interfacea() {
                initComponents();

                tablemodele = (DefaultTableModel) TableDocuments.getModel();
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableDocuments = new javax.swing.JTable();
        champTexte = new javax.swing.JTextField();
        jComboBoxDocuments = new javax.swing.JComboBox<>();
        Filter = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Recherche = new javax.swing.JButton();
        addDocument = new javax.swing.JButton();
        addAdherent = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TableDocuments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ISBN", "titre", "tableau_auteur", "editeur", "annee_edition", "URL", "nbPages", "tome", "type"
            }
        ));
        TableDocuments.setShowGrid(true);
        jScrollPane2.setViewportView(TableDocuments);

        champTexte.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        champTexte.setText("Enter text here");
        champTexte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champTexteActionPerformed(evt);
            }
        });

        jComboBoxDocuments.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Livre", "Dictionnaire", "Magazine" }));
        jComboBoxDocuments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDocumentsActionPerformed(evt);
            }
        });

        Filter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ISBN", "titre", "auteur", "editeur", "annee_edition", "URL", "nbPages", "tome", "type" }));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("type du document:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Recherche par:");

        jLabel3.setFont(new java.awt.Font("VIP Rawy Regular", 1, 48)); // NOI18N
        jLabel3.setText("Mediatheque");

        Recherche.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Recherche.setText("Recherche");
        Recherche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RechercheActionPerformed(evt);
            }
        });

        addDocument.setText("Interface d'ajout de documents");
        addDocument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDocumentActionPerformed(evt);
            }
        });

        addAdherent.setText("Interface de suppression d'adherant");
        addAdherent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAdherentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(champTexte, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Recherche, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(addDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(addAdherent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addComponent(jComboBoxDocuments, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBoxDocuments, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Filter, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(champTexte, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Recherche, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDocument, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(addAdherent, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addDocumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDocumentActionPerformed
        // TODO add your handling code here:
        ajouterDocumentFrame ajouterDocFrame = new ajouterDocumentFrame();

        ajouterDocFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        ajouterDocFrame.setVisible(true);

 
    }//GEN-LAST:event_addDocumentActionPerformed

    private void addAdherentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAdherentActionPerformed
        // TODO add your handling code here:
        AjouterAdherentFrame ajouterAdhFrame = new AjouterAdherentFrame();

        ajouterAdhFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        ajouterAdhFrame.setVisible(true);
    }//GEN-LAST:event_addAdherentActionPerformed

        private void RechercheActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_RechercheActionPerformed
                tablemodele.setRowCount(0);
                switch (jComboBoxDocuments.getSelectedItem().toString()) {
                        case "Livre": {
                                try {
                                        Livre();
                                } catch (SQLException ex) {
                                        Logger.getLogger(interfacea.class.getName()).log(Level.SEVERE, null, ex);
                                }
                        }
                                break;
                        case "Magazine": {
                                try {
                                        Magazine();
                                } catch (SQLException ex) {
                                        Logger.getLogger(interfacea.class.getName()).log(Level.SEVERE, null, ex);
                                }
                        }
                                break;
                        case "Dictionnaire": {
                                try {
                                        Dictionnaire();
                                } catch (SQLException ex) {
                                        Logger.getLogger(interfacea.class.getName()).log(Level.SEVERE, null, ex);
                                }
                        }
                                break;

                }
        }// GEN-LAST:event_RechercheActionPerformed

        private void champTexteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_champTexteActionPerformed
                // TODO add your handling code here:
        }// GEN-LAST:event_champTexteActionPerformed

        private void jComboBoxDocumentsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jComboBoxDocumentsActionPerformed
                // TODO add your handling code here:
        }// GEN-LAST:event_jComboBoxDocumentsActionPerformed

        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
                /* Set the Nimbus look and feel */
                // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
                // (optional) ">
                /*
                 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
                 * look and feel.
                 * For details see
                 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
                 */
                try {
                        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                                        .getInstalledLookAndFeels()) {
                                if ("Nimbus".equals(info.getName())) {
                                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                        break;
                                }
                        }
                } catch (ClassNotFoundException ex) {
                        java.util.logging.Logger.getLogger(interfacea.class.getName()).log(
                                        java.util.logging.Level.SEVERE, null,
                                        ex);
                } catch (InstantiationException ex) {
                        java.util.logging.Logger.getLogger(interfacea.class.getName()).log(
                                        java.util.logging.Level.SEVERE, null,
                                        ex);
                } catch (IllegalAccessException ex) {
                        java.util.logging.Logger.getLogger(interfacea.class.getName()).log(
                                        java.util.logging.Level.SEVERE, null,
                                        ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                        java.util.logging.Logger.getLogger(interfacea.class.getName()).log(
                                        java.util.logging.Level.SEVERE, null,
                                        ex);
                }
                // </editor-fold>

                /* Create and display the form */
                java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                                new interfacea().setVisible(true);
                        }
                });
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Filter;
    private javax.swing.JButton Recherche;
    private javax.swing.JTable TableDocuments;
    private javax.swing.JButton addAdherent;
    private javax.swing.JButton addDocument;
    private javax.swing.JTextField champTexte;
    private javax.swing.JComboBox<String> jComboBoxDocuments;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
        private void Livre() throws SQLException {
                Livreutil lu = new Livreutil();
                LinkedList<Livre> livres = new LinkedList<>();
                DefaultTableModel tablemodeleModele = new DefaultTableModel();
                String[][] tableModele;
                switch (Filter.getSelectedItem().toString()) {
                        case "ISBN":
                                livres = lu.getLivreByISBN(champTexte.getText());
                                break;
                        case "titre":
                                livres = lu.getLivreByTitre(champTexte.getText());
                                break;
                        case "editeur":
                                livres = lu.getLivreByEditeur(champTexte.getText());
                                break;
                        case "annee_edition":
                                livres = lu.getLivreByAnneeEdition(champTexte.getText());
                                break;
                        case "URL":
                                livres = lu.getLivreByURL(champTexte.getText());
                                break;
                        case "nbPages":
                                livres = lu.getLivreByNbPages(Integer.parseInt(champTexte.getText()));
                                break;
                        case "tome":
                                livres = lu.getLivreByTome(Integer.parseInt(champTexte.getText()));
                                break;
                        case "type":
                                livres = lu.getLivreByType(champTexte.getText());
                                break;
                        case "tableau_auteur":
                                livres = lu.getLivreByTableauAuteur(champTexte.getText());
                                break;
                }

                tablemodeleModele = (DefaultTableModel) TableDocuments.getModel();
                tableModele = new String[livres.size()][9];

                for (int i = 0; i < livres.size(); i++) {
                        tableModele[i][0] = livres.get(i).getISBN();
                        tableModele[i][1] = livres.get(i).getTitre();
                        tableModele[i][2] = lu.listToString(livres.get(i).getTableau_auteurs());
                        tableModele[i][3] = livres.get(i).getEditeur();
                        tableModele[i][4] = livres.get(i).getAnnee_edition();
                        tableModele[i][5] = livres.get(i).getURL();
                        tableModele[i][6] = Integer.toString(livres.get(i).getNbPages());
                        tableModele[i][7] = Integer.toString(livres.get(i).getTome());
                        tableModele[i][8] = livres.get(i).getType();

                        tablemodeleModele.addRow(tableModele[i]);
                }
        }

        private void Magazine() throws SQLException {
                MagazineUtil mu = new MagazineUtil();
                LinkedList<Magazine> magazines = new LinkedList<>();
                DefaultTableModel tablemodeleModele = new DefaultTableModel();
                String[][] tableModele;

                switch (Filter.getSelectedItem().toString()) {
                        case "ISBN":
                                magazines = mu.getMagazineByISBN(champTexte.getText());
                                break;
                        case "titre":
                                magazines = mu.getMagazineByTitre(champTexte.getText());
                                break;
                        case "editeur":
                                magazines = mu.getMagazineByEditeur(champTexte.getText());
                                break;
                        case "annee_edition":
                                magazines = mu.getMagazineByAnneeEdition(champTexte.getText());
                                break;
                        case "URL":
                                magazines = mu.getMagazineByURL(champTexte.getText());
                                break;
                        case "periodicite":
                                magazines = mu.getMagazineByPeriodicite(Integer.parseInt(champTexte.getText()));
                                break;
                        case "moisEdition":
                                magazines = mu.getMagazineByMoisEdition(champTexte.getText());
                                break;
                        case "jour":
                                magazines = mu.getMagazineByJour(champTexte.getText());
                                break;
                }

                tablemodeleModele = (DefaultTableModel) TableDocuments.getModel();
                tableModele = new String[magazines.size()][9];
                System.out.println(magazines.size());

                for (int i = 0; i < magazines.size(); i++) {
                        tableModele[i][0] = magazines.get(i).getISBN();
                        tableModele[i][1] = magazines.get(i).getTitre();
                        tableModele[i][2] = mu.listToString(magazines.get(i).getTableau_auteurs());
                        tableModele[i][3] = magazines.get(i).getEditeur();
                        tableModele[i][4] = magazines.get(i).getAnnee_edition();
                        tableModele[i][5] = magazines.get(i).getURL();
                        tableModele[i][6] = Integer.toString(magazines.get(i).getPeriodicite());
                        tableModele[i][7] = magazines.get(i).getMoisEdition();
                        tableModele[i][8] = magazines.get(i).getJour();

                        tablemodeleModele.addRow(tableModele[i]);
                }
        }

        private void Dictionnaire() throws SQLException {
                Dictionnaireutil du = new Dictionnaireutil();
                LinkedList<Dictionnaire> dictionnaires = new LinkedList<>();
                DefaultTableModel tablemodeleModele = new DefaultTableModel();
                String[][] tableModele;

                switch (Filter.getSelectedItem().toString()) {
                        case "ISBN":
                                dictionnaires = du.getDictionnaireByISBN(champTexte.getText());
                                break;
                        case "titre":
                                dictionnaires = du.getDictionnaireByTitre(champTexte.getText());
                                break;
                        case "editeur":
                                dictionnaires = du.getDictionnaireByEditeur(champTexte.getText());
                                break;
                        case "annee_edition":
                                dictionnaires = du.getDictionnaireByAnnee_Editon(champTexte.getText());
                                break;
                        case "URL":
                                dictionnaires = du.getDictionnaireByURL(champTexte.getText());
                                break;
                        case "langue":
                                dictionnaires = du.getDictionnaireByLangue(champTexte.getText());
                                break;
                        case "nbTomes":
                                dictionnaires = du.getDictionnaireByNbTomes(Integer.parseInt(champTexte.getText()));
                                break;
                }

                tablemodeleModele = (DefaultTableModel) TableDocuments.getModel();
                tableModele = new String[dictionnaires.size()][8];

                for (int i = 0; i < dictionnaires.size(); i++) {
                        tableModele[i][0] = dictionnaires.get(i).getISBN();
                        tableModele[i][1] = dictionnaires.get(i).getTitre();
                        tableModele[i][2] = du.listToString(dictionnaires.get(i).getTableau_auteurs());
                        tableModele[i][3] = dictionnaires.get(i).getEditeur();
                        tableModele[i][4] = dictionnaires.get(i).getAnnee_edition();
                        tableModele[i][5] = dictionnaires.get(i).getURL();
                        tableModele[i][6] = dictionnaires.get(i).getLangue();
                        tableModele[i][7] = Integer.toString(dictionnaires.get(i).getNbTomes());

                        tablemodeleModele.addRow(tableModele[i]);
                }
        }

        DefaultTableModel tablemodele;
}
